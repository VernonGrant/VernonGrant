<?xml version='1.0' encoding='utf-8'?><rss xmlns:content='http://purl.org/rss/1.0/modules/content/' xmlns:dc='http://purl.org/dc/elements/1.1/' xmlns:atom='http://www.w3.org/2005/Atom' xmlns:media='http://search.yahoo.com/mrss/' xmlns:wfw='http://wellformedweb.org/CommentAPI/' xmlns:sy='http://purl.org/rss/1.0/modules/syndication/' xmlns:slash='http://purl.org/rss/1.0/modules/slash/' version='2.0'><channel><title>Vernon Grant</title><link>https://www.vernon-grant.com</link><description>Welcome to my personal blog where I cover a variety of programming related topics</description><language>en-us</language><lastBuildDate>2024-10-09 Wed 18:40:32 +02:00</lastBuildDate><pubDate>2024-10-09 Wed 18:40:32 +02:00</pubDate><atom:link rel='self' type='application/rss+xml' href='https://www.vernon-grant.com/rss.xml'></atom:link><item><title>Structure Padding and Alignment</title><link>https://www.vernon-grant.com/C/structure-padding-and-alignment.html</link><pubDate>2023-09-09 Sat 09:34:00 +02:00</pubDate><description>The order in which you place a structure’s member’s effects, its size and memory layout. The essence of why this is the case, relates to the concept of memory alignment and the compiler’s mission to make memory access as efficient as possible.</description><content:encoded><![CDATA[ <div id='content' class='content'><h1 class='title'>Structure Padding and Alignment
<br />
<span class='subtitle'>The order in which you place a structure’s member’s effects, its size and memory layout</span></h1><p>
The essence of why this is the case, relates to the concept of memory alignment and the compiler's mission to make memory access as efficient as possible. The way in which the compiler chooses to make memory access more efficient, greatly depends on the architecture that's being used.
</p><p>
Let's take a look at a couple examples:
</p><div class='org-src-container'><pre class='src src-c'>// I might assume that the total size is 8 bytes, but that will be false.
struct example {
  char a;  // 1 byte
  short b; // 2 bytes
  char c;  // 1 byte
  int d;   // 4 bytes
};

// Outputs: The size of structure example is: 12 bytes.
printf("The size of structure example is: %lu bytes.\n", sizeof(struct example));
</pre></div><p>
Based on the output, you can see that this structure has an additional 4 bytes. That should be unexpected, if you're unfamiliar with memory alignment. Now let's make a small adjustment by moving member <code>b</code> below member <code>c</code> and recheck the output.
</p>

<div class='org-src-container'><pre class='src src-c'>struct example {
  char a; // 1 byte
  char c; // 1 byte
  short b; // 2 bytes
  int d; // 4 bytes
};

// Outputs: The size of structure example is: 8 bytes.
printf("The size of structure example is: %lu bytes.\n", sizeof(struct example));
</pre></div><p>
The structure's size is now 4 bytes less. As you can see, the way in which you order a structures members can have a dramatic effect on memory usage, especially if your dealing with thousands of instances.
</p><p>
Truthfully speaking, it's not all that important for you to understand exactly how the compiler is going to align your structure in memory, especially as a beginner. As you can always just perform manual checks to find the most optimal ordering for your use case. Also, the alignment of a structure's member's depends heavily on the platform. So manually optimizing a structure, won't generalize to all platforms.
</p><p>
Knowing exactly how the compiler chooses to align a structure members can be difficult to determine without a deep understanding of the architecture your using. But I think the following quote from The Lost Art of Structure Packing, can help you build an intuition for most cases.
</p><blockquote><p>
Each type except char has an alignment requirement; chars can start on any byte address, but 2-byte shorts must start on an even address, 4-byte ints or floats must start on an address divisible by 4, and 8-byte longs or doubles must start on an address divisible by 8. The jargon for this is that basic C types on a vanilla ISA (Instruction Set Architectures) are self-aligned. Pointers, whether 32-bit (4-byte) or 64-bit (8-byte) are self-aligned too. &#x2013; Eric S. Raymond
</p></blockquote><p>
To better understand the above statement, let's look at the memory layout of the above two examples, and break down the memory alignment checks.
</p><div class='org-src-container'><pre class='src src-c'>// 12 byte struct layout.
struct example {
  char a; // 1 byte
  short b; // 2 bytes
  char c; // 1 byte
  int d; // 4 bytes
};

// Addresses +0 +1 +2 +3
// -------------------------------------------
// 7156 0x41 0x7f 0x64 0x00 A?d?
// 7160 0x41 0xe0 0xff 0xff A???
// 7164 0x64 0x00 0x00 0x00 d???

struct example test = {'A', 100, 'A', 100};
// 0x41, [0x64,0x00], 0x41, [0x64,0x00,0x00,0x00]
</pre></div><ul class='org-ul'><li><code>test.a</code> is stored at address: <code>7156</code>.</li>
<li><code>test.b</code>, (short) is stored at address: <code>7158</code>.
<ul class='org-ul'><li><code>7157 % sizeof(short)</code> is non-zero, a 2-byte short must start on an even address.</li>
</ul></li>
<li><code>test.c</code>, (char) is stored at address: <code>7160</code>.</li>
<li><code>test.d</code>, (int) is stored at address: <code>7164</code>.
<ul class='org-ul'><li><code>7161 % sizeof(int)</code> is non-zero. A 4-byte int must start on an address divisible by 4.</li>
<li><code>7162 % sizeof(int)</code> is non-zero. A 4-byte int must start on an address divisible by 4.</li>
<li><code>7163 % sizeof(int)</code> is non-zero. A 4-byte int must start on an address divisible by 4.</li>
</ul></li>
</ul>

<p>
So basically the 4-bytes that were skipped in favor of memory alignment is referred to as padding.
</p><div class='org-src-container'><pre class='src src-c'>// 8 byte struct layout.
struct example {
  char a; // 1 byte
  char c; // 1 byte
  short b; // 2 bytes
  int d; // 4 bytes
};

// Addresses +0 +1 +2 +3
// --------------------------------------------
// 7156 0x41 0x41 0x64 0x00 AAd?
// 7160 0x64 0x00 0x00 0x00 d???

struct example test = {'A', 'A', 100, 100};
// 0x41, 0x41, [0x64,0x00],[0x64,0x00,0x00,0x00]
</pre></div><ul class='org-ul'><li><code>test.a</code> is stored at address: <code>7156</code>.</li>
<li><code>test.c</code>, (char) is stored at address: <code>7157</code>.</li>
<li><code>test.b</code>, (short) is stored at address: <code>7158</code>.</li>
<li><code>test.d</code>, (int) is stored at address: <code>7160</code>.
<ul class='org-ul'><li><code>7159 % sizeof(int)</code> is non-zero. A 4-byte int must start on an address divisible by 4.</li>
</ul></li>
</ul>

<p>
The theory of memory alignment in most ISA can also be put this way:
</p><blockquote><p>
Unaligned memory accesses occur when you try to read N bytes of data starting from an address that is not evenly divisible by N <code>(i.e. addr % N !</code> 0)=. For example, reading 4 bytes of data from address <code>0x10004</code> is fine, but reading 4 bytes of data from address <code>0x10005</code> would be an unaligned memory access.
</p>
</blockquote>

<p>
Before closing this topic, it's also interesting to think of an array of structures. In C, array's items are placed side by side, allowing us to access items by size offsets, as an array can only contain items of the same type.
</p><p>
Looking at the previous memory layouts, it's clear that both our structures can be placed side by side and all their individual members will still be aligned correctly.
</p></div> ]]></content:encoded></item><item><title>1 - Finding Files Recursively Using Locate</title><link>https://www.vernon-grant.com/Emacs/Discovering-Emacs/1-finding-files-recursively-using-locate.html</link><pubDate>2023-09-09 Sat 09:24:00 +02:00</pubDate><description>Locate is a program that searches for a specific pattern inside a database that contains pathnames.</description><content:encoded><![CDATA[ <div id='content' class='content'><h1 class='title'>1 - Finding Files Recursively Using Locate
<br />
<span class='subtitle'>Locate is a program that searches for a specific pattern inside a database that contains pathnames</span></h1><div id='table-of-contents' role='doc-toc'><h2>Table of Contents</h2><div id='text-table-of-contents' role='doc-toc'><ul><li><a href='#org29c2da6'>What is locate?</a></li><li><a href='#org382537a'>Using locate in combination with Emacs</a></li><li><a href='#org748eeca'>Using locate for individual projects</a></li><li><a href='#org26c8b32'>Conclusion</a></li></ul></div></div><p><a href='https://www.discovering-emacs.com/2134279/12265945-1-finding-files-recursively-using-locate'>Listen To Episode</a> | <a href='https://youtu.be/Qz8O9XWKFwM'>YouTube Video</a></p><div id='outline-container-org29c2da6' class='outline-2'><h2 id='org29c2da6'>What is locate?</h2><div class='outline-text-2' id='text-org29c2da6'><p>
Locate is a program that searches for a specific pattern inside a
database that contains pathnames. The command used for updating the
database is called <code>updatedb</code>.
</p>

<p>
Once the database has been generated, you can use <code>locate</code> to find all
matching file paths inside of the database. It does this almost
instantly, making it a great choice to find files inside of unknown
locations. All you need to do is run <code>locate pattern</code> to find matches.
You can also make use of shell globbing and quoting characters to help
narrow the results.
</p>

<p>
On Linux you should be all set, but if your on a Mac, please conceder
installing <code>findutils</code>, via brew, instead of trying to use the default
<code>locate</code> and <code>updatedb</code> commands. The brew version of these commands
will be prefixed with a <code>g</code>, so you'll need to run <code>glocate</code> and
<code>gupdatedb</code>.
</p>
</div>
</div>

<div id='outline-container-org382537a' class='outline-2'><h2 id='org382537a'>Using locate in combination with Emacs</h2><div class='outline-text-2' id='text-org382537a'><p>
Emacs already has a command named locate. When running this command you
can pass it a string, and locate will then look through the database for
all the matching paths, and lists all the results in an Emacs buffer.
This buffer also features some additional functionality, but we won't be
covering that today.
</p><p>
This can obviously save you time when your looking for a file, but can't
remember where it's located. But for most of my personal use cases, I'm
more interested in finding files recursively inside a specific project's
scope, and that's what we'll be discussing next.
</p></div></div><div id='outline-container-org748eeca' class='outline-2'><h2 id='org748eeca'>Using locate for individual projects</h2><div class='outline-text-2' id='text-org748eeca'><p>
There are many ways you can go about configuring locate in and outside
of Emacs. The following is what I came up, but feel free to experiment
and come up with better solutions.
</p><p>
First, we don't really want to generate a database for our entire file
system, so we can configure locate to generate a database just for the
folder containing our projects. We will write a Emacs lisp function that
calls <code>updatedb</code> with two arguments, <code>localpaths</code> that specifies the
folder that contains all our projects, and <code>output</code> that specifies the
location of our database file. In addition, we also need to create an
environment variable that specifies the same database path, named
<code>LOCATE_PATH</code>, we can do this inside of our dot Emacs configuration
file.
</p>

<p>
If your on macOS, you'll also need to set two additional Emacs option
variables, for <code>locate-command</code> and <code>locate-update-command</code> as we need
to take into account the <code>g</code> prefix.
</p>

<p>
Next we will define two helper functions inside our dot Emacs
configuration. The first function will help us update our locate
database when needed. The second will help us automatically filter the
results based on the projects root folder, this allows us to use locate
for only project specific files.
</p><div class='org-src-container'><pre class='src src-lisp'>;;;;;;;;;;;;;;;
;; Functions ;;
;;;;;;;;;;;;;;;

(defun vg-get-the-project-path()
  "Get a projects root directory if found.
Try to find the .git folder or a .dirlocals.el file and base the projects
root on that."
  (let ((dirlocals-file (locate-dominating-file default-directory ".dir-locals.el"))
        (git-folder (locate-dominating-file default-directory ".git")))
    ;; Return git folder if found.
    (when git-folder
      git-folder)
    ;; Return dirlocals path if found.
    (when dirlocals-file
      dirlocals-file)
    ;; Can't find root, just return the default directory.
    (expand-file-name default-directory)))

;;;;;;;;;;;;
;; Locate ;;
;;;;;;;;;;;;

;; We need to define this environment variable to specify the database to use.
(setenv "LOCATE_PATH" "/Users/vernon/locate-database")

;; The g-prefix is required for Mac, when installing findutils via brew.
(setq-default locate-command "glocate")
(setq-default locate-update-command "gupdatedb")

(defun vg-locate-in-project-scope()
  "Call locate with the current projects root path being the filter."
  (interactive)
  (let ((match (read-string "Locate: ")))
    (locate-with-filter match (vg-get-the-project-path))))

(defun vg-locate-update()
  "Update the locate database."
  (interactive)
  (let (
        ;; Define your projects folder path here.
        (projects-folder-path "/Users/vernon/Devenv")
        (locate-database-path (getenv "LOCATE_PATH")))
    (message "Updating locate database...")
    (shell-command     (mapconcat 'identity
                                  (list
                                   "gupdatedb"
                                   (concat "--localpaths=" projects-folder-path)
                                   (concat "--output=" locate-database-path))
                                  " "))
    (message "Database has been updated!")))

;; Setting our custom bindings.
(define-key global-map (kbd "C-c f") 'vg-locate-in-project-scope)
(define-key global-map (kbd "C-c F") 'vg-locate-update)
</pre></div><p>
A good set of key bindings for these functions will be <code>C-c f</code>, to
recursively find files inside the current project. And <code>C-c F</code> to update
the locate database.
</p>

<p>
Please note, you can find the code examples in the podcast repository,
linked inside the show notes of this episode.
</p></div></div><div id='outline-container-org26c8b32' class='outline-2'><h2 id='org26c8b32'>Conclusion</h2><div class='outline-text-2' id='text-org26c8b32'><p>
Although there are many great plugins that makes finding files
recursively easy. Locate can be a valid solution for those who's main
goal is to keep their Emacs configuration as minimal as possible.
</p><p>
Thanks for listing and stay tuned for the next episode of
<a href='https://www.discovering-emacs.com'>Discovering Emacs</a>.
</p></div></div></div> ]]></content:encoded></item><item><title>2 - Efficiency With The Mark Ring</title><link>https://www.vernon-grant.com/Emacs/Discovering-Emacs/2-efficiency-with-the-mark-ring.html</link><pubDate>2023-09-09 Sat 09:24:00 +02:00</pubDate><description>The mark ring feature maintains a record of previous locations. Emacs offers two types of mark rings, local and global. Both of these keeps track of previous locations and are limited to a certain number of marks.</description><content:encoded><![CDATA[ <div id='content' class='content'><h1 class='title'>2 - Efficiency With The Mark Ring
<br />
<span class='subtitle'>The mark ring feature maintains a record of previous locations</span></h1><div id='table-of-contents' role='doc-toc'><h2>Table of Contents</h2><div id='text-table-of-contents' role='doc-toc'><ul><li><a href='#org395add1'>What is the mark ring</a></li><li><a href='#orgfa19f4f'>Understanding the local and global mark rings</a></li><li><a href='#org675233c'>How marks are added</a></li><li><a href='#org77904a6'>How to jump between marks</a></li><li><a href='#org7d81990'>Conclusion</a></li></ul></div></div><p><a href='https://www.discovering-emacs.com/2134279/12309075-2-efficiency-with-the-mark-ring'>Listen To Episode</a> | <a href='https://youtu.be/uhyr8kvKa2I'>YouTube Video</a></p><div id='outline-container-org395add1' class='outline-2'><h2 id='org395add1'>What is the mark ring</h2><div class='outline-text-2' id='text-org395add1'><p>
The mark ring feature maintains a record of previous locations. Emacs
offers two types of mark rings, local and global. Both of these keeps
track of previous locations and are limited to a certain number of
marks. A user can cycle through the mark ring, jumping between
locations. Marks are automatically added before or after performing
certain actions, but most importantly, they can be added by the user.
</p><p>
The act of manually placing marks was much more popular in the past,
maybe because most developers were working on a single monitor with
limited screen real estate. Having the ability to manually set marks,
was a great way to increase productivity and save time, because
developers could slingshot themselves between locations. Back then there
was no <code>transient-mark-mode</code>, so regions in emacs was not visually
displayed, and so developers had to remember where they placed the last
mark.
</p>

<p>
Some Emacs users still chooses to disable <code>transient-mark-mode</code> today.
Although, this is not recommended and we won't be touching on this in
detail, it does allow some aspects of mark setting to become more
efficient. I might be mistaken, but I believe "Jonathan Blow", the
creator of braid and the witness, still uses this workflow. So if your
interested in seeing this in action, you can probably go checkout some
of his online steams.
</p>
</div>
</div>

<div id='outline-container-orgfa19f4f' class='outline-2'><h2 id='orgfa19f4f'>Understanding the local and global mark rings</h2><div class='outline-text-2' id='text-orgfa19f4f'><p>
Each buffer in Emacs has its own local mark ring. Marks are
automatically added to the this mark ring after certain actions are
performed. A user can also manually add marks where needed.
</p><p>
In addition to the local mark ring, Emacs also offers a global mark
ring. The global mark ring holds marks across multiple buffers, meaning,
it can be used to cycle through previous buffers, landing at specific
locations. But, its behavior is admittedly very confusing, one would
expect the global mark ring to contain a single mark for each buffer and
to update that mark to the most recent local mark for each individual
buffer. But this is not the case, the same buffer can have multiple
marks entries inside of the global mark ring.
</p><p>
After writing some Emacs Lisp code to look at the global mark rings
state, it became clear that my intuition on how the global mark ring
works, was wrong. And based on my experiment, I concluded that a mark,
is only added to the global mark ring if the following two condition are
met:
</p><ol class='org-ol'><li>The mark at the top of the global mark ring's stack (or the latest
global mark), must not be for the same buffer.</li><li><del>The mark must be unique (or a different location) from previous
entries that matches the buffer.</del></li></ol><p>
In essence, you can only change a buffers global mark, if the latest
global mark in the stack, is not for the same buffer. <del>And the mark your
trying to set is unique in the context of the global mark ring.</del></p><p>
One configuration change I would like to suggest, is to decrease the
mark limits of both the local and global mark rings, you can do this
using these configuration options:
</p><div class='org-src-container'><pre class='src src-lisp'>(setq mark-ring-max 6)
(setq global-mark-ring-max 8)
</pre></div><p>
By default, both of these have a value of 16 and decreasing this to
around 8, makes using the mark ring much more efficient.
</p></div></div><div id='outline-container-org675233c' class='outline-2'><h2 id='org675233c'>How marks are added</h2><div class='outline-text-2' id='text-org675233c'><p>
It's important to know when Emacs chooses to automatically add a mark to
the mark rings. Building up an intuition for when Emacs adds marks, will
help you better understand where the next jump will take you. One tip is
to keep an eye on the mini buffer, for the words "Mark Set", obviously
indicating that a mark has been added. Here is some of the most common
actions that automatically adds new marks:
</p><ul class='org-ul'><li>Any time you start a new region, a mark will be placed at the
beginning. The same is true for rectangle selections and using a mouse
to drag out regions.</li><li>Yanking will place a mark at the starting point. So after pasting
something into a buffer, you can jump back to the original location.
We will be coving jumping shortly.</li><li>I-Search will also place marker before navigating to the selected
term.</li><li>Using certain commands such as <code>goto-line</code>, <code>insert-file</code>,
<code>insert-abbrevs</code> and so on, will place a mark before the action takes
place.</li>
</ul>

<p>
Aside from marks being automatically added, a user can also manually set
marks, using <code>C-SPC C-SPC</code>. Basically, starting and ending a regional
selection.
</p>
</div>
</div>

<div id='outline-container-org77904a6' class='outline-2'><h2 id='org77904a6'>How to jump between marks</h2><div class='outline-text-2' id='text-org77904a6'><p>
By default you can jump between local marks using <code>C-u C-SPC</code> and
repeating this key combination will cycle you through each mark in the
local mark ring. This is where the configuration option
<code>set-mark-command-repeat-pop</code> comes in handy. Setting it to a non nil
value, will eliminate the need to repeat this key binding for each jump.
With this option set, you can press <code>C-u C-SPC</code>, leave the control key
down and just continue tapping space to cycle through the local mark
ring.
</p>

<div class='org-src-container'><pre class='src src-lisp'>(setq-default set-mark-command-repeat-pop t)
</pre></div><p>
This configuration option also effects the binding for the global mark
ring, which is <code>C-x C-SPC</code>, so instead of tediously repeating this for
each global mark jump. You can also just type <code>C-x C-SPC</code>, keep control
down and just tap away at the space bar to cycle through the global mark
ring.
</p>
</div>
</div>

<div id='outline-container-org7d81990' class='outline-2'><h2 id='org7d81990'>Conclusion</h2><div class='outline-text-2' id='text-org7d81990'><p>
The mark ring feature once mastered, can be a real productivity boost
and time saver. I really hope this episode provided you with some value
and that you decide to start to incorporate the kill ring feature it
into your daily workflow.
</p><p>
And as always you can find a link to the episodes detailed show notes in
the description of this episode. And if you have some suggestions,
corrections or need help, please feel free to open up a new discussion
in the discussions section of the podcast's repository.
</p><p>
Thanks for listing and stay tuned for the next episode of <a href='https://www.discovering-emacs.com'>Discovering Emacs</a>.
</p></div></div></div> ]]></content:encoded></item><item><title>3 - Making Incremental Search Work for You</title><link>https://www.vernon-grant.com/Emacs/Discovering-Emacs/3-making-incremental-search-work-for-you.html</link><pubDate>2023-09-09 Sat 09:26:00 +02:00</pubDate><description>Today I'm going to share some of the ways I utilize Emacs's incremental search, during my workflow. In addition I'll be sharing some configuration recommendations that you might also find useful.</description><content:encoded><![CDATA[ <div id='content' class='content'><h1 class='title'>3 - Making Incremental Search Work for You
<br />
<span class='subtitle'>Here's some ways I utilize Emacs's incremental search, during my workflow</span></h1><div id='table-of-contents' role='doc-toc'><h2>Table of Contents</h2><div id='text-table-of-contents' role='doc-toc'><ul><li><a href='#orgb83b50c'>Displaying the number of matches in the Minibuffer</a></li><li><a href='#orged55f66'>Making use of the search rings</a></li><li><a href='#org0a42186'>Using its yanking capabilities</a></li><li><a href='#org0bf2917'>Performing quick query replacements</a></li><li><a href='#org2570d67'>Jumping to first and last match</a></li><li><a href='#org96b6f69'>Triggering occur form incremental search</a></li><li><a href='#orgf2fec68'>Conclusion</a></li></ul></div></div><p><a href='https://www.discovering-emacs.com/2134279/12359134-3-making-incremental-search-work-for-you'>Listen To Episode</a> | <a href='https://youtu.be/9CdbfZXsrqg'>YouTube Video</a></p><p>
Today I'm going to share some of the ways I utilize Emacs's incremental
search, during my workflow. In addition I'll be sharing some
configuration recommendations that you might also find useful.
</p><div id='outline-container-orgb83b50c' class='outline-2'><h2 id='orgb83b50c'>Displaying the number of matches in the Minibuffer</h2><div class='outline-text-2' id='text-orgb83b50c'><p>
By default incremental search does not provide any indication of the
total number of matches that where found for current search term. It
also doesn't show us how many more matches we can navigate forward or
backward before wrapping would occur.
</p><p>
Luckily, there's a configuration option that solves both of these
issues. Setting the option <code>isearch-lazy-count</code> to a non nil value, will
provide an indicator in the minibuffer that shows the total number of
matches found, and how many more lies ahead or behind the current match.
</p>

<div class='org-src-container'><pre class='src src-lisp'>(setq-default isearch-lazy-count t)
</pre></div><p>
Having the minibuffer display the total number of matching terms, helps
me a lot in terms of awareness. Knowing exactly how many matches where
found and how far along I am, is a great convenience and helps with my
intuition when navigating through a file's source code.
</p></div></div><div id='outline-container-orged55f66' class='outline-2'><h2 id='orged55f66'>Making use of the search rings</h2><div class='outline-text-2' id='text-orged55f66'><p>
Incremental search does also have a search ring. The search ring is
basically just a list that contains your previous search terms. Having
the option to bring back some of your previous searches is major time
saver and I find myself using it all the time.
</p><p>
The way in which you navigate the search ring, is by simplify pressing
<code>M-p</code>, to advance and <code>M-n</code> to retreat. My typical use case will be to
activate incremental search by pressing <code>C-s</code> and then immediately
hitting <code>M-n</code> repeatedly, until I find the previous search term I'm
looking for.
</p>

<p>
Please also be aware that there's actually two search rings, one for
regular searches and another for regular expression searches. By
default, both of these will store a maximum of 16 search terms. You can
how ever customize the size of these rings by using the following two
configuration options:
</p><div class='org-src-container'><pre class='src src-lisp'>(defcustom search-ring-max 26)
(defcustom regexp-search-ring-max 26)
</pre></div></div></div><div id='outline-container-org0a42186' class='outline-2'><h2 id='org0a42186'>Using its yanking capabilities</h2><div class='outline-text-2' id='text-org0a42186'><p>
Incremental search has the ability to yank things into the current
search string. This is by far one of the features I use the most, and
not just for searching purposes. The most common yanking option is to
make use of <code>C-w</code>, to pull the word that's in front of the cursor into
the current search term.
</p>

<p>
Let's go over a practical example: You place the cursor in front of two
separate words that you would like to search for. First you activate
incremental search by pressing <code>C-s</code> and then you press <code>C-w</code> and the
search term will expand, so it includes the first word. Pressing <code>C-w</code> a
second time will pull the next word into the search term. The
incremental search now contains both words and so you can now continue
jumping to other matches by pressing <code>C-s</code>.
</p>

<p>
It's almost like the selection expansion feature you might find in other
code editors. I find myself using this feature to quickly yank one or
more words, so I can perform a quick search, do a query replacements or
simply just do a basic yank.
</p><p>
Here's some more yanking shortcuts you can use:
</p><ul class='org-ul'><li><code>C-M-y</code>, Can be used to yank one char at a time.</li>
<li><code>C-M-z</code>, Can be used to yank up until a character. I sometimes use
this inside of long strings to yank everything up until the ending
quote.</li>
<li><code>M-s C-e</code>: Can be used to yank the rest of the line.</li>
</ul>

<p>
Emacs 27.1 added the option to make all standard movement keys
automatically perform yanking operations when incremental search is
active. I don't personally use this, but you try it out by setting
<code>isearch-yank-on-move</code> to a non nil value.
</p>

<div class='org-src-container'><pre class='src src-lisp'>(setq-default isearch-yank-on-move t)
</pre></div><p>
One other set of key bindings worth mentioning here is <code>C-y</code> and <code>M-y</code>.
They allow you to take an entry from the kill ring and append it to the
current search term. So, if I wanted to search for something matching a
previous kill, I can simplify activate incremental search and hit <code>C-y</code>.
You can also use <code>M-y</code> to cycle through earlier kill ring entries.
</p>
</div>
</div>

<div id='outline-container-org0bf2917' class='outline-2'><h2 id='org0bf2917'>Performing quick query replacements</h2><div class='outline-text-2' id='text-org0bf2917'><p>
This might be common knowledge but I think it's still worth mentioning
that you can transition from incremental search to query replacement by
typing <code>M-%</code>. And with the aforementioned yanking capabilities you can
use incremental search as a convenient precursor to query replacement.
</p>
</div>
</div>

<div id='outline-container-org2570d67' class='outline-2'><h2 id='org2570d67'>Jumping to first and last match</h2><div class='outline-text-2' id='text-org2570d67'><p>
Sometimes after starting a search you might want to navigate to the very
first or last match. You can do this by pressing <code>M-s M-&lt;</code> to jump to
the beginning and <code>M-s M-&gt;</code> to jump to the end.
</p>

<p>
You can also set the option <code>isearch-allow-motion</code> to enable the
standard vertical motion key bindings of <code>M-&lt;</code> (beginning-of-buffer),
<code>M-&gt;</code> (end-of-buffer), <code>C-v</code> (scroll-up-command) and <code>M-v</code>
(scroll-down-command).
</p>
</div>
</div>

<div id='outline-container-org96b6f69' class='outline-2'><h2 id='org96b6f69'>Triggering occur form incremental search</h2><div class='outline-text-2' id='text-org96b6f69'><p>
Another great way to make use of incremental search is by using it as a
precursor to Occur. You can use the current search term as an regular
expression for Occur by pressing <code>M-s o</code>. Use this if you need to make
changes to some of the matches, by directly editing them inside of
Occur.
</p>
</div>
</div>

<div id='outline-container-orgf2fec68' class='outline-2'><h2 id='orgf2fec68'>Conclusion</h2><div class='outline-text-2' id='text-orgf2fec68'><p>
Incremental search can be used for much more than just searching. It can
be utilized to become a convenient little helper, and once mastered, it
becomes a great precursor to many additional operations. Ultimately
making things more intuitive and faster to perform.
</p><p>
And as always you can find a link to the episodes detailed show notes in
the description of this episode. And if you have some suggestions,
corrections or need help, please feel free to open up a new discussion
in the discussions section of the podcast's repository.
</p><p>
Thanks for listing and stay tuned for the next episode of
<a href='https://www.discovering-emacs.com'>Discovering Emacs</a>.
</p></div></div></div> ]]></content:encoded></item><item><title>4 - Using Whitespace Mode</title><link>https://www.vernon-grant.com/Emacs/Discovering-Emacs/4-using-whitespace-mode.html</link><pubDate>2023-09-09 Sat 09:28:00 +02:00</pubDate><description>Today, we're taking a look at Emacs's whitespace mode and discussing how we can simplify its configuration to make it more applicable for most use cases.</description><content:encoded><![CDATA[ <div id='content' class='content'><h1 class='title'>4 - Using Whitespace Mode
<br />
<span class='subtitle'>Emacs has by far the most comprehensive whitespace rendering capabilities, that I've come across in any text editor</span></h1><div id='table-of-contents' role='doc-toc'><h2>Table of Contents</h2><div id='text-table-of-contents' role='doc-toc'><ul><li><a href='#org4215f85'>Introduction</a></li><li><a href='#org1b4c855'>Specifying a whitespace style</a></li><li><a href='#orgb2a6a90'>Dealing with whitespace coloring issues</a></li><li><a href='#org2b15d02'>Specifying what symbols should represent whitespace</a></li><li><a href='#orgdb64c85'>Enabling whitespace mode globally</a></li><li><a href='#org0c858e1'>Making use of cleanup actions</a></li><li><a href='#org58682c7'>Conclusion</a></li></ul></div></div><p><a href='https://www.discovering-emacs.com/2134279/12444688-4-using-whitespace-mode'>Listen To Episode</a> | <a href='https://youtu.be/uViGjSqrLDw'>YouTube Video</a></p><p>
Today, we're taking a look at Emacs's <code>whitespace-mode</code> and discussing
how we can simplify its configuration to make it more applicable for
most use cases.
</p>

<div id='outline-container-org4215f85' class='outline-2'><h2 id='org4215f85'>Introduction</h2><div class='outline-text-2' id='text-org4215f85'><p>
Emacs has by far the most comprehensive whitespace rendering
capabilities, that I've come across in any text editor. It has the
basics that you would expect, such as rendering spaces, tabs and line
breaks. But it also offers much more, it provides whitespace reports,
performs cleanup operations and gives us fine grained control of what
types of whitespace to render depending on the context. For example, we
can highlight spaces that are in front of tabs, long lines, big
indentations and much more.
</p><p>
But unfortunately, with Emacs's whitespace mode being so feature rich,
it can be misunderstood by new users, coming from other text editors. As
by default, enabling <code>whitespace-mode</code> will render a wide array of
whitespace criteria, that at first sight seems strange and confusing.
And the end result is usually (even in my personal experience), to just
keep whitespace mode disabled. When in reality I would much rather have
whitespace visible at all times.
</p>

<p>
And that's the goal for today's episode, to make <code>whitespace-mode</code> more
applicable to new Emacs users and for general use cases.
</p>
</div>
</div>

<div id='outline-container-org1b4c855' class='outline-2'><h2 id='org1b4c855'>Specifying a whitespace style</h2><div class='outline-text-2' id='text-org1b4c855'><p>
We can define what types of whitespace should be shown, by specifying
the whitespace style. We do this by modifying the configuration option
<code>whitespace-style</code>. It takes a list, consisting of the types of
whitespace that you would like visualize. There's a large number of
types available, but our goal here is to just show the bare minimum. If
you want to see all the available options, you can press <code>C-h v</code> and
type in <code>whitespace-style</code>.
</p>

<p>
So to keep things simple I recommend you set the whitespace style
configuration list to include the following:
</p><div class='org-src-container'><pre class='src src-lisp'>;; Define the whitespace style.
(setq-default whitespace-style
              '(face spaces empty tabs newline trailing space-mark tab-mark newline-mark))
</pre></div><p>
With just this configuration change, the behavior of Emacs's whitespace
mode will become much more familiar, in regards to how other text
editors visualize whitespace.
</p></div></div><div id='outline-container-orgb2a6a90' class='outline-2'><h2 id='orgb2a6a90'>Dealing with whitespace coloring issues</h2><div class='outline-text-2' id='text-orgb2a6a90'><p>
Seeing as whitespace mode is so seldomly used, most themes don't define
proper whitespace coloring. Generally speaking, you want whitespace to
appear in a faded manner, to be visible, but not distracting. To help
you with potential theming issues, I included some Emacs lisp code that
you can place inside of your configuration file to help easily adjust
the whitespace color by certain percentage.
</p><div class='org-src-container'><pre class='src src-lisp'>;; Whitespace color corrections.
(require 'color)
(let* ((ws-lighten 30) ;; Amount in percentage to lighten up black.
       (ws-color (color-lighten-name "#000000" ws-lighten)))
  (custom-set-faces
   `(whitespace-newline                ((t (:foreground ,ws-color))))
   `(whitespace-missing-newline-at-eof ((t (:foreground ,ws-color))))
   `(whitespace-space                  ((t (:foreground ,ws-color))))
   `(whitespace-space-after-tab        ((t (:foreground ,ws-color))))
   `(whitespace-space-before-tab       ((t (:foreground ,ws-color))))
   `(whitespace-tab                    ((t (:foreground ,ws-color))))
   `(whitespace-trailing               ((t (:foreground ,ws-color))))))
</pre></div></div></div><div id='outline-container-org2b15d02' class='outline-2'><h2 id='org2b15d02'>Specifying what symbols should represent whitespace</h2><div class='outline-text-2' id='text-org2b15d02'><p>
There's a configuration option named <code>whitespace-display-mappings</code>, that
you can use to specify what Unicode character should be use to visualize
a specific whitespace. It takes a two dimensional list, where each inner
list consists of a <code>kind</code>, which can be either <code>tab-mark</code>, <code>space-mark</code>
and <code>newline-mark</code>. After which you specify the character you want to
replace, and lastly, you specify a <code>vector</code> that holds the characters to
use for the replacement purpose. You can specify multiple vectors to act
as fallbacks, in case a Unicode symbol isn't available.
</p>

<p>
I'll share my configuration as an example in show notes.
</p><div class='org-src-container'><pre class='src src-lisp'>;; Make these characters represent whitespace.
(setq-default whitespace-display-mappings
      '(
        ;; space -&gt; · else .
        (space-mark 32 [183] [46])
        ;; new line -&gt; ¬ else $
        (newline-mark ?\n [172 ?\n] [36 ?\n])
        ;; carriage return (Windows) -&gt; ¶ else #
        (newline-mark ?\r [182] [35])
        ;; tabs -&gt; » else &gt;
        (tab-mark ?\t [187 ?\t] [62 ?\t])))
</pre></div></div></div><div id='outline-container-orgdb64c85' class='outline-2'><h2 id='orgdb64c85'>Enabling whitespace mode globally</h2><div class='outline-text-2' id='text-orgdb64c85'><p>
We can enable whitespace mode globally by calling
<code>global-whitespace-mode</code>. The downside of this is that whitespace will
be rendered inside of every Emacs buffer and this is really not
necessary. For example, I don't want whitespace to be rendered inside
<code>shell</code>, <code>occur</code> or <code>ibuffer</code> windows.
</p>

<p>
Luckily there's an option available to control which modes should enable
whitespace mode when <code>global-whitespace-mode</code> is enabled. And it's aptly
named, <code>whitespace-global-modes</code>. This option takes a list of major mode
symbol names, that when matched, will enable <code>whitespace-mode</code>. We can
also negate the list, by prefixing it with <code>not</code>, causing global
whitespace mode to be disabled for the listed major mode symbols. And
that's the way I configure it myself.
</p>

<div class='org-src-container'><pre class='src src-lisp'>;; Don't enable whitespace for.
(setq-default whitespace-global-modes
              '(not shell-mode
                    help-mode
                    magit-mode
                    magit-diff-mode
                    ibuffer-mode
                    dired-mode
                    occur-mode))
</pre></div></div></div><div id='outline-container-org0c858e1' class='outline-2'><h2 id='org0c858e1'>Making use of cleanup actions</h2><div class='outline-text-2' id='text-org0c858e1'><p>
One benefit of having whitespace mode enabled globally, is that we can
take advantage of the whitespace actions feature. This features allows
us to automatically run a series of actions after a buffer is written.
</p><p>
Today we're only really interested in the cleanup actions. These cleanup
actions will perform different operations based on the defined
whitespace style. For our defined whitespace style the following actions
will be formed on cleanup.
</p><ul class='org-ul'><li>It will remove all empty lines at beginning and/or end of the buffer.</li><li>It will remove all trailing tabs and spaces.</li></ul><div class='org-src-container'><pre class='src src-lisp'>;; Set whitespace actions.
(setq-default whitespace-action
              '(cleanup auto-cleanup))
</pre></div><p>
If you want to seen all the available cleanup operations, in relation to
different <code>whitespace-style</code> options. You can press <code>C-h f</code> and type in
<code>whitespace-cleanup</code>.
</p>
</div>
</div>

<div id='outline-container-org58682c7' class='outline-2'><h2 id='org58682c7'>Conclusion</h2><div class='outline-text-2' id='text-org58682c7'><p>
Emacs's whitespace mode has a great degree of flexibility and power. If
gives you control over what types whitespace should be given attention,
how they should be visualized and cleaned. If you have been avoiding
whitespace mode in Emacs, I hope this episode might encourage you to
give it a try.
</p><p>
And as always you can find a link to the episodes detailed show notes in
the description of this episode. And if you have some suggestions,
corrections or need help, please feel free to open up a new discussion
in the discussions section of the podcast's repository.
</p><p>
Thanks for listing and stay tuned for the next episode of
<a href='https://www.discovering-emacs.com'>Discovering Emacs</a>.
</p></div></div></div> ]]></content:encoded></item><item><title>5 - Essential Movement and Editing Shortcuts</title><link>https://www.vernon-grant.com/Emacs/Discovering-Emacs/5-essential-movement-and-editing-shortcuts.html</link><pubDate>2023-09-09 Sat 09:33:00 +02:00</pubDate><description>In today's episode I'll be sharing some default movement and editing shortcuts. I'll only be cover some of the essentials, but I'm sure there's something new for both beginners and experienced Emacs users.</description><content:encoded><![CDATA[ <div id='content' class='content'><h1 class='title'>5 - Essential Movement and Editing Shortcuts
<br />
<span class='subtitle'>The default Emacs bindings is actually really effective once mastered</span></h1><div id='table-of-contents' role='doc-toc'><h2>Table of Contents</h2><div id='text-table-of-contents' role='doc-toc'><ul><li><a href='#org88b01f1'>Movement shortcuts</a></li><li><a href='#orgfa9a37e'>Taking advantage of the s-expression shortcuts</a></li><li><a href='#org0ddfb0f'>Making use of prefixes</a></li><li><a href='#orgdedb01c'>Editing shortcuts</a></li><li><a href='#orgb46b739'>Shortcut recommendations</a></li><li><a href='#org978ca51'>Conclusion</a></li></ul></div></div><p><a href='https://www.discovering-emacs.com/2134279/12499332-5-essential-movement-and-editing-shortcuts'>Listen To Episode</a> | <a href='https://youtu.be/nG3EMqOAWDg'>YouTube Video</a></p><p>
In today's episode I'll be sharing some default movement and editing
shortcuts. I'll only be cover some of the essentials, but I'm sure
there's something new for both beginners and experienced Emacs users. At
the end I'll share some key binding recommendations to make the editing
experience in Emacs slightly better.
</p><div id='outline-container-org88b01f1' class='outline-2'><h2 id='org88b01f1'>Movement shortcuts</h2><div class='outline-text-2' id='text-org88b01f1'><p>
There's obviously the basic character and word movements shortcuts, that
I'm sure most of you already know, but for those new to Emacs. You can
use <code>C-f</code> to move one character forward, <code>C-b</code> to move one character
backward. And to move by word, you can use <code>M-f</code> and <code>M-b</code>.
</p>

<p>
There's also the basic <code>C-a</code> and <code>C-e</code> to move to the beginning and end
of a line, and finally there's <code>C-p</code> and <code>C-n</code> to move up and down
lines.
</p>

<p>
With the basics out of the way, let's now cover some more interesting
bindings:
</p><ul class='org-ul'><li><code>M-m</code>: Moves the cursor to the true beginning of a line, in other
words it moves the cursor to the indentation or to the first character
ignoring the white space.</li>
<li><code>M-&lt;</code>,=M-&gt;= Jumps to the beginning and end of the buffer. Keep in mind
that a mark is set before the jump takes place.</li>
<li><code>C-v</code>, <code>M-v</code> Moves the cursor a up a page or down a page, useful for
faster vertical movement for file scanning.</li>
<li><code>M-g M-g</code> Moves the cursor to the specified line number. You can also
prefix this command to avoid the mini buffer prompt. (We'll cover
prefixing commands later)</li>
<li><code>C-l</code> Will cycle the cursors line between the center, top and bottom
of the current window's view port.</li>
<li><code>M-r</code> Will cycle the cursor position between the center, top and
bottom of the current windows view port.</li>
</ul>
</div>
</div>

<div id='outline-container-orgfa9a37e' class='outline-2'><h2 id='orgfa9a37e'>Taking advantage of the s-expression shortcuts</h2><div class='outline-text-2' id='text-orgfa9a37e'><p>
Aside from the aforementioned movement shortcuts, I find myself making
heavy use Emacs's s-expression shortcuts. These are intended for lisp
like programming languages, but in Emacs they actually work for almost
all languages. If your unfamiliar with Emacs's s-expression shortcuts
and how to use them, let me give you an example use case:
</p><p>
Imagine you open up a C source file that defines a series of functions.
We can make use of the s-expression shortcuts, <code>C-M-p</code> and <code>C-M-n</code> to
vertically move the cursor between each function, as long as the cursor
is at the file's root level. If the cursor was somewhere inside a
function, we can move the cursor to an outer block, using <code>C-M-u</code> (think
of it as, up) and we can do the opposite by moving the cursor into
deeper blocks, using <code>C-M-d</code> (think of this as, down).
</p>

<p>
Emacs provides a series of s-expression shortcuts for editing and
movement commands. Be sure to give them a try, and you might also find
them invaluable.
</p></div></div><div id='outline-container-org0ddfb0f' class='outline-2'><h2 id='org0ddfb0f'>Making use of prefixes</h2><div class='outline-text-2' id='text-org0ddfb0f'><p>
Before we move on to the editing shortcuts, it's useful to know about
Emacs's ability to prefix existing shortcuts with positive and negative
counts. To demonstrate this we'll look at the <code>kill-word</code> shortcut,
<code>M-d</code>. By default this binding deletes a word to the right of the
cursor. If we prefixed this command by first pressing <code>M--</code> and then
<code>M-d</code>. It will perform the operation in the opposite direction and
delete the first word to the left of the cursor. This type of prefix is
basically a negative count and it's officially referred to as a negative
argument.
</p>

<p>
Many of Emacs's default shortcuts can be prefixed with such negative
arguments, by either using <code>M--</code> or <code>C--</code>. We can also prefix shortcuts
with positive counts that causes the operation to be performed multiple
times. For example, if we wanted to delete 5 words to the right of the
cursor. We would press <code>M-5</code>, followed by <code>M-d</code>. Such positive counts
can also be negated, so if we wanted to delete 5 words to the left, we
could press <code>M--</code>,=M-5= and <code>M-d</code>.
</p>

<p>
One important thing to notice here, is that we can either use control or
meta for prefix operations. This provides you with a little bit more
flexibility and convince when making use of prefix shortcuts. Emacs has
a few more prefix shortcuts, but these seems to be the one's I find
myself using the most. To recap:
</p><ul class='org-ul'><li><code>M-{1,2,3...}</code>, <code>C-{1,2,3...}</code> Prefixes a command with a count. This
count can also be negated using either <code>M--</code> or <code>C--</code>.</li>
<li><code>M--</code>, <code>C--</code> Prefixes a command with a negative argument of <code>-1</code>.</li>
</ul>
</div>
</div>

<div id='outline-container-orgdedb01c' class='outline-2'><h2 id='orgdedb01c'>Editing shortcuts</h2><div class='outline-text-2' id='text-orgdedb01c'><p>
To keep things interesting, I'm only going to share the editing related
shortcuts that I myself use on regular basis. Also keep mind that most
of the following shortcuts do also accept prefixes.
</p><ul class='org-ul'><li><code>C-d</code>, <code>M-d</code> Delete a character or word forward.</li>
<li><code>C-k</code> Kills everything to the right of the cursor, on the current
line.</li>
<li><code>C-M-k</code> Kills the s-expression in front of the cursor. It can be used
to kill entire code blocks.</li>
<li><code>C-&lt;backspace&gt;</code> Deletes a word to the left of the cursor.</li>
<li><code>M-i</code> Inserts horizontal white space.</li>
<li><code>M-\</code> Deletes horizontal white space.</li>
<li><code>M-^</code> Joins the current line with previous line. And when used with a
negative prefix, it will join the following line with the current
line.</li>
<li><code>M-SPC</code>, Insures that there's only one space between characters.</li>
<li><code>M-c,</code>, <code>M-u</code>, <code>M-l</code> Can be use to capitalize, uppercase or lowercase
a word.</li>
<li><code>C-x C-o</code> Removes all extra blank lines above and below the cursor.</li>
<li><code>C-x C-;</code> Comments out the current line.</li>
<li><code>M-;</code> Can be used to comment out regions.</li>
<li><code>C-x z</code> Repeats last complex command. A complex command is one that
used the mini buffer.</li>
<li><code>C-x i</code> Inserts a file's contents into the current buffer, at the
cursors point.</li>
<li><code>C-x (, C-x ), C-x e</code> Can be used to quickly record, end and play a
macro.</li>
<li><code>C-x h</code> Highlights the entire buffer.</li>
<li><code>C-M-\</code> Re indents the current region. It can also be used after
directly yanking some source code into the buffer.</li>
<li><code>M-z</code> Called, Zap to char, kills everything forward up to and
including the given character. (I'll also share a better solution a
little later)</li>
<li><code>M-q</code> Fill paragraph.</li>
<li><code>C-x r t</code> When rectangle selection mode is active (<code>C-x SPC</code>), this
shortcut replaces the contents of the rectangle selection with the
provided string, on each line.</li>
</ul>
</div>
</div>

<div id='outline-container-orgb46b739' class='outline-2'><h2 id='orgb46b739'>Shortcut recommendations</h2><div class='outline-text-2' id='text-orgb46b739'><p>
Before I share these recommendations we should be aware of the following
user key binding rule:
</p><blockquote><p>
Sequences consisting of <code>C-c</code> and a letter (either upper or lower case;
ASCII or non-ASCII) are reserved for users;
</p>
</blockquote>

<p>
Although I personally following this rule for most of my key bindings.
The following recommendations chooses to ignore this rule for efficiency
reasons. But feel free to rebind them as you would like.
</p><p>
Over time I found default <code>save-buffer</code> shortcut of <code>C-x C-s</code> to be a
little bit cumbersome. So I rebound this action to <code>C-RET</code>.
</p>

<div class='org-src-container'><pre class='src src-lisp'>;; Save the current buffer.
(define-key global-map (kbd "&lt;C-return&gt;") 'save-buffer)
</pre></div><p>
When navigating between two or more splits, <code>C-x o</code> requires you to
cycle through in one direction. You can however use a negative prefix,
but I found the binding <code>C-x O</code> to travel in opposite direction more
convenient.
</p>

<div class='org-src-container'><pre class='src src-lisp'>;; Change window backward.
(define-key global-map (kbd "C-x O") (lambda ()
                                       (interactive)
                                       (other-window -1)))
</pre></div><p>
To add a new line in Emacs, without breaking the current line into two,
one must first move the cursor to the end, using <code>C-e</code>, before pressing
the return key. I found, combining these two action using the shortcut
<code>M-RET</code> to be of much use.
</p>

<div class='org-src-container'><pre class='src src-lisp'>;; Opens a new line and places cursor on it, without breaking the current line.
(define-key global-map (kbd "&lt;M-return&gt;") (lambda ()
                                            (interactive)
                                            (move-end-of-line 1)
                                            (newline-and-indent)))
</pre></div><p>
The last recommendation is to make use of <code>zap-up-to-char</code>, which I find
much more useful than <code>zap-to-char</code>. One additional optimization is to
abstract away the mini buffer prompt by using an interactive function. I
chose to remap <code>C-z</code> for this purpose and with this modification I can
now press <code>C-z</code> followed by any character, making Emacs kill everything
up to but not including the character.
</p>

<div class='org-src-container'><pre class='src src-lisp'>;; Zap up to char quickly.
(defun vg-quick-zap-up-to-char (p c)
  "The same as zap up to char, but without the mini buffer prompt.
P: The prefix argument or the count.
C: The character to zap up to."
  (interactive "P\nc")
  (let ((cnt (cond ((null p) 1)
                   ((symbolp p) -1)
                   (t p))))
    (zap-up-to-char cnt c)))
(define-key global-map (kbd "C-z") 'vg-quick-zap-up-to-char)
</pre></div></div></div><div id='outline-container-org978ca51' class='outline-2'><h2 id='org978ca51'>Conclusion</h2><div class='outline-text-2' id='text-org978ca51'><p>
Emacs has great set of default editing and movement shortcuts that once
mastered can make you very productive. And to some degree, I think it's
a shame that so many new users start off using Emacs with Vim emulation.
Of course everyone is different, and what works for some might not work
for others. But I would encourage new Emacs users to give the default
key bindings a decent chance. Who knows, you might find yourself in
appreciation of synergy they create across such a vast amount of
different major modes.
</p><p>
And as always you can find a link to the episodes detailed show notes in
the description of this episode. And if you have some suggestions,
corrections or need help, please feel free to open up a new discussion
in the discussions section of the podcast's repository.
</p><p>
Thanks for listing and stay tuned for the next episode of
<a href='https://www.discovering-emacs.com'>Discovering Emacs</a>.
</p></div></div></div> ]]></content:encoded></item><item><title>Tmux, Emacs and The System Clipboard on Wayland</title><link>https://www.vernon-grant.com/Emacs/tmux-emacs-and-the-system-clipboard-on-wayland.html</link><pubDate>2023-09-08 Fri 20:39:00 +02:00</pubDate><description>Getting the system clipboard to work between Tmux, Emacs and Wayland.</description><content:encoded><![CDATA[ <div id='content' class='content'><h1 class='title'>Tmux, Emacs and The System Clipboard on Wayland
<br />
<span class='subtitle'>Getting the system clipboard to work between Tmux, Emacs and Wayland</span></h1><div id='table-of-contents' role='doc-toc'><h2>Table of Contents</h2><div id='text-table-of-contents' role='doc-toc'><ul><li><a href='#orgc7263ae'>Install WL-Clipboard</a></li><li><a href='#orgb3e0e9c'>Add the following to your Emacs configuration file</a></li></ul></div></div><p>
It took me some time to copy and past between my Tmux sessions and the operating system, running a terminal Emacs instance on Wayland. I tried a few different Emacs packages such as Clipetty and Xclip but couldn't get either working. Luckily I found a solution.
</p><div id='outline-container-orgc7263ae' class='outline-2'><h2 id='orgc7263ae'>Install WL-Clipboard</h2><div class='outline-text-2' id='text-orgc7263ae'><p><a href='https://github.com/bugaevc/wl-clipboard'>WL-Clipboard</a> (Wayland Clipboard) project implements two command-line Wayland clipboard utilities, wl-copy and wl-paste, that lets you easily copy data between the clipboard and Unix pipes, sockets, files and so on. We will bind these command-line utilities to Emacs's cut and past functions.
</p><div class='org-src-container'><pre class='src src-shell'># Fedora
sudo dnf install wl-clipboard

# Ubuntu
sudo apt-get -y install wl-clipboard
</pre></div></div></div><div id='outline-container-orgb3e0e9c' class='outline-2'><h2 id='orgb3e0e9c'>Add the following to your Emacs configuration file</h2><div class='outline-text-2' id='text-orgb3e0e9c'><p>
After adding the following to your Emacs initialization file, restart your terminal and Tmux sessions. Now yanking and killing things in Emacs will automatically use the system clipboard across all Tmux sessions.
</p><div class='org-src-container'><pre class='src src-lisp'>;; credit: yorickvP on Github
(when (string= (getenv "XDG_SESSION_TYPE") "wayland")
  (setq wl-copy-process nil)

  (defun wl-copy (text)
    (setq wl-copy-process (make-process :name "wl-copy"
                                        :buffer nil
                                        :command '("wl-copy" "-f" "-n")
                                        :connection-type 'pipe))
    (process-send-string wl-copy-process text)
    (process-send-eof wl-copy-process))

  (defun wl-paste ()
    (if (and wl-copy-process (process-live-p wl-copy-process))
        nil ; should return nil if we're the current paste owner
        (shell-command-to-string "wl-paste -n | tr -d \r")))

  (setq interprogram-cut-function 'wl-copy)
  (setq interprogram-paste-function 'wl-paste))
</pre></div></div></div></div> ]]></content:encoded></item><item><title>Linux Groups Explained</title><link>https://www.vernon-grant.com/Linux/linux-groups-explained.html</link><pubDate>2023-09-09 Sat 09:35:00 +02:00</pubDate><description>Today we'll be expanding on the subject of groups in Linux. The aim is to provide you with better intuition on how they work.</description><content:encoded><![CDATA[ <div id='content' class='content'><h1 class='title'>Linux Groups Explained
<br />
<span class='subtitle'>Linux was designed to handle concurrent users</span></h1><div id='table-of-contents' role='doc-toc'><h2>Table of Contents</h2><div id='text-table-of-contents' role='doc-toc'><ul><li><a href='#org97ab82a'>The purpose of groups</a></li><li><a href='#orgbfc967b'>How we manage groups in Linux</a></li><li><a href='#orgafd6e9e'>Creating and removing groups</a></li><li><a href='#org5a84c2a'>Adding, removing or moving a user between groups</a></li><li><a href='#orge4e111f'>Listing a users groups</a></li><li><a href='#org02b6c26'>The relationship between groups and file permissions</a></li><li><a href='#orgc524ab8'>Setting up a directory for user collaboration</a></li><li><a href='#orgdde1eec'>Conclusion</a></li></ul></div></div><p>
Today we'll be expanding on the subject of groups in Linux. The aim is to provide you with better intuition on how they work, and how we can use them in particular situations. We'll also briefly discuss the relationship between groups and file permissions and how we might limit their privileges. In addition we'll be covering some of the technicalities, such as creating new groups and adding users to them. But, we'll mainly focus on improving our understanding of groups in general.
</p><div id='outline-container-org97ab82a' class='outline-2'><h2 id='org97ab82a'>The purpose of groups</h2><div class='outline-text-2' id='text-org97ab82a'><p>
Linux was designed to handle concurrent users. If multiple users can make use of a single system, then there must be a way for users to collaborate, and this is where groups come in to play. Groups gives us the power to determine what privileges a set of users has over specific resources. Allowing multiple users to securely operate on the same files based on clearly defined boundaries and limitations.
</p><p>
A Linux system has different types of users such as, super/root users, normal users and system users (usually used for background processes). But fundamentally they are all the same, aside from the influence they possess. In essence, groups determine the authority a user has over certain system resources, being it a running system process or a normal user account trying to make file changes.
</p></div></div><div id='outline-container-orgbfc967b' class='outline-2'><h2 id='orgbfc967b'>How we manage groups in Linux</h2><div class='outline-text-2' id='text-orgbfc967b'><p>
In Linux each group is uniquely identified by a <code>GID</code>, just as the users are identified by a <code>UID</code>. When a user is created they are automatically given a primary group, usually this group is named the same as their login/username. A Linux user can have only one primary group and zero or more secondary groups. When we discuss the management of groups in the next few sections, we are talking about secondary groups.
</p>
</div>
</div>

<div id='outline-container-orgafd6e9e' class='outline-2'><h2 id='orgafd6e9e'>Creating and removing groups</h2><div class='outline-text-2' id='text-orgafd6e9e'><p>
In order to create a new group we must have superuser privileges, we can of course use sudo to achieve this on most Linux distributions. The command we need to use is called <code>groupadd</code>. We can add a new group by running the following:
</p>

<div class='org-src-container'><pre class='src src-shell'># developers is being the groups name.
sudo groupadd developers
</pre></div><p>
To remove a group we can use the <code>groupdel</code> command like so:
</p>

<div class='org-src-container'><pre class='src src-shell'>sudo groupdel developers
</pre></div><p>
All groups are added to the group file, located at <code>/etc/group</code>, so we can check if newly added groups has successfully been created by performing a quick grep search. Obviously, this is not needed but it's useful to know where the group data is stored, especially when dealing with other common debugging situations. Nevertheless, you can check it by running the following:
</p>

<div class='org-src-container'><pre class='src src-shell'># add the new group
sudo groupadd developers

# check if the group has been added
cat /etc/group | grep developers
</pre></div></div></div><div id='outline-container-org5a84c2a' class='outline-2'><h2 id='org5a84c2a'>Adding, removing or moving a user between groups</h2><div class='outline-text-2' id='text-org5a84c2a'><p>
To add a users to a group we'll need root privileges, we can add a user to a group by using the usermod command.
</p><div class='org-src-container'><pre class='src src-shell'># jhon is the username
# developers is the group
sudo usermod -aG developers jhon
</pre></div><p>
When we called the command we passed in two arguments, lower case <code>a</code> and uppercase <code>G</code>. The uppercase <code>G</code> stands for groups and the lowercase <code>a</code> forces the command to append the user to the given group without removing them from all other secondary groups.
</p>

<p>
This might seem strange at first, but when you think of things from a administrative perspective, this actually makes a lot of sense. It allows us to assign a user to specific groups and at the same time exclude them from others. Essentially allowing us to move them across groups. Here's an example of adding a user to specific secondary groups:
</p><div class='org-src-container'><pre class='src src-shell'>sudo usermod -G developers,managers,websites jhon
</pre></div></div></div><div id='outline-container-orge4e111f' class='outline-2'><h2 id='orge4e111f'>Listing a users groups</h2><div class='outline-text-2' id='text-orge4e111f'><p>
When managing user groups it's useful to check what groups a specific user belongs to. We can achieve this in a verity of ways, but I recommend using the id command. This command prints the user and group IDs for a particular user. We can use the command as follows:
</p><div class='org-src-container'><pre class='src src-shell'># $USER is your username
id $USER

# result:
uid=1000(vernon) gid=1000(vernon) groups=1000(vernon),10(wheel),1002(kings)
</pre></div></div></div><div id='outline-container-org02b6c26' class='outline-2'><h2 id='org02b6c26'>The relationship between groups and file permissions</h2><div class='outline-text-2' id='text-org02b6c26'><p>
Before heading into a practical example of using groups. It's important to briefly mention file permissions. Without a good understanding of file permissions it would be very difficult for anyone to make any meaningful use of groups. Groups are one of the 3 main aspects of a file's permissions.
</p><p>
In Linux each file has permissions set for the <b>owner, group and world</b>.
</p>

<p>
When we set a file's permission using <code>chmod</code>, we get to define the privileges a group has in terms of reading, writing and executing a file. As we might already know, a directory in Linux is just a file, but the permissions of standard files and directories do in fact differ. And it's important to understand these core differences in order to make effective use of groups.
</p>

<p>
Here's a brief comparison between file and directory permissions.
</p><ul class='org-ul'><li><b>Files:</b>
<ul class='org-ul'><li>READ: Read the contents of a file.</li><li>WRITE: Change the contents of a file.</li><li>EXECUTE: Run the file as a program.</li></ul></li><li><b>Directories:</b>
<ul class='org-ul'><li>READ: List files and sub-directories.</li><li>WRITE : Create or remove files or sub-directories.</li><li>EXECUTE: Allows the traversal of the directory.</li></ul></li></ul></div></div><div id='outline-container-orgc524ab8' class='outline-2'><h2 id='orgc524ab8'>Setting up a directory for user collaboration</h2><div class='outline-text-2' id='text-orgc524ab8'><p>
Let's imagine that on our Linux system there's 3 developers Jhon, Erric and Dan. Jhon want's to create a folder named Projects in his home directory, that both Erric and Dan can also access and work in. Jhon will setup the folder and it's permissions like so:
</p><div class='org-src-container'><pre class='src src-shell'># create the directory
mkdir Projects

# Jhon set's the permission of the new folder to: drwxrwx---
# Only the directory owner and groups can access it.
# Notice the 's' for the setgid bit.
chmod u+rwx,g+rws,o-rwx ./Projects/
</pre></div><p>
The <code>setgid</code> bit makes executables run under group privileges. We won't be covering special permission here, but feel free to do some more research if needed.
</p>

<p>
Jhon also needs to make sure that the Erric and Dan can access his home directory. He decides to give the world read and execute permission on his home folder.
</p><div class='org-src-container'><pre class='src src-python'># Jhon gives the world read and execution access to his home directory
chmod u+rwx,g-rwx,o+rx =/
</pre></div><p>
Next he creates a new group called <code>developers</code> and adds himself, Erric and Dan to it.
</p>

<div class='org-src-container'><pre class='src src-shell'># adds new group
sudo groupadd developers

# adds users to the new group
sudo usermod -aG developers jhon
sudo usermod -aG developers erric
sudo usermod -aG developers dan
</pre></div><p>
Finally, Jhon just needs to change the group of the Projects directory. He does this using the chown command.
</p><div class='org-src-container'><pre class='src src-shell'>chown jhon:developers =/Projects
</pre></div><p>
Everything is now done and Erric and Dan can now freely read, write and execute files and sub-directories inside the Projects folder.
</p><p><b>Also please note, sometimes group changes does not take immediate effect and a user might need to first log out and back in.</b> Be sure to use the <code>id</code> command to check a users groups when facing permission issues.
</p>
</div>
</div>

<div id='outline-container-orgdde1eec' class='outline-2'><h2 id='orgdde1eec'>Conclusion</h2><div class='outline-text-2' id='text-orgdde1eec'><p>
I hope that the following helped you better understand the idea behind groups and how to make use of them in Linux. I'll also like to encourage people new to the world of Linux to take a look at related topics, such as special file permissions or groups used by background processes.
</p></div></div></div> ]]></content:encoded></item><item><title>How To Write Good Code Comments</title><link>https://www.vernon-grant.com/Software-Design/how-to-write-good-code-comments.html</link><pubDate>2023-09-09 Sat 20:04:00 +02:00</pubDate><description>Today we will be taking a look into the comprehensive subject of code comments. Specifically uncovering the characteristics of what is considered, good or bad comments. In addition, we will discuss the two main types and the general rules that applies to each.</description><content:encoded><![CDATA[ <div id='content' class='content'><h1 class='title'>How To Write Good Code Comments
<br />
<span class='subtitle'>Uncovering the characteristics of what is considered, good or bad comments</span></h1><div id='table-of-contents' role='doc-toc'><h2>Table of Contents</h2><div id='text-table-of-contents' role='doc-toc'><ul><li><a href='#orgbedb4ad'>The overall idea behind comments</a></li><li><a href='#org447bd14'>The two main types of comments</a></li><li><a href='#orge26af75'>Interface comments</a></li><li><a href='#org3cf86ed'>Implementation comments</a></li><li><a href='#org570cc14'>The two main characteristics of bad comments</a><ul><li><a href='#org6ffe7a0'>They repeat the code</a></li><li><a href='#org866b975'>They leave us with questions</a></li></ul></li><li><a href='#orga561235'>Conclusion</a></li></ul></div></div><p>
Today we will be taking a look into the comprehensive subject of code comments. Specifically uncovering the characteristics of what is considered, good or bad comments. In addition, we will discuss the two main types and the general rules that applies to each.
</p><div id='outline-container-orgbedb4ad' class='outline-2'><h2 id='orgbedb4ad'>The overall idea behind comments</h2><div class='outline-text-2' id='text-orgbedb4ad'><p>
Code comments should be considered an important tool that brings clarity to otherwise un-clear or abstract information. Comments gives the designer a chance to capture the thoughts and ideas that leaded to their decisions. They provide the users of a system with the information they need, to make use of a given interface.
</p><p>
Comments also gives developers better intuition about certain implementations or an entire systems inner workings. Most importantly, comments makes the un-obvious, obvious. To take a quote from the great book, A Philosophy of Software Design by John Ousterhout.
</p><blockquote><p>
The overall idea behind comments is to capture information that was in the mind of the designer but couldn’t be represented in code.
&#x2013; A Philosophy of Software Design
</p></blockquote></div></div><div id='outline-container-org447bd14' class='outline-2'><h2 id='org447bd14'>The two main types of comments</h2><div class='outline-text-2' id='text-org447bd14'><p>
There’s different types of comments, but for our purposes we’ll just be looking at interface and implementation comments. Each of these requires a slightly altered perspective to write properly. Depending on the type, our intentions needs to change as the essence of the information we need to reveal differs. Let’s take a look at them in more detail.
</p></div></div><div id='outline-container-orge26af75' class='outline-2'><h2 id='orge26af75'>Interface comments</h2><div class='outline-text-2' id='text-orge26af75'><p>
By interface comments, we are not referring to the same interfaces that are used in the world of object oriented programming. Instead, function declarations such as the name and parameters, is an interface that will be used by some client. The comments associated with these declarations, are considered interface comments.
</p><p>
These types of comments should provide enough information to the client, so that they can make use of the interface without needing to explore the encapsulated code. Most languages uses these types of comments to generate documentation with tools such as <a href='https://www.doxygen.nl/'>Doxygen</a>, <a href='https://phpdox.net/'>phpDox</a> and <a href='https://jsdoc.app/'>jsdoc</a>, just to name a few.
</p></div></div><div id='outline-container-org3cf86ed' class='outline-2'><h2 id='org3cf86ed'>Implementation comments</h2><div class='outline-text-2' id='text-org3cf86ed'><p>
Comments found in the body of a function, class or script is considered implementation comments. Generally, the goal of these comments is to explain at a higher level, what the code is trying to do or what the designers intentions where. This gives us a nice overview of the inner workings of code block and allows us to critique it’s actions.
</p><p>
They can help point out bug workarounds, potential issues, or cryptic pieces of code. We usually write implementation comments when dealing with code of greater complexity, as simpler blocks of code rarely needs any additional clarification. They do however require some common sense to write well.
</p></div></div><div id='outline-container-org570cc14' class='outline-2'><h2 id='org570cc14'>The two main characteristics of bad comments</h2><div class='outline-text-2' id='text-org570cc14'></div><div id='outline-container-org6ffe7a0' class='outline-3'><h3 id='org6ffe7a0'>They repeat the code</h3><div class='outline-text-3' id='text-org6ffe7a0'><p>
Comments that closely represents their related interface or implementation, for the most part, provides no real value. These types of comments basically just repeats the code itself, and does not give any additional information about the related interface or implementation.
</p><p>
In the following example we have a PHP class named Currency that contains a list of currency codes.
</p><p>
It has an opening comment that basically just repeats the class declaration and gives no further information. A better comment would have been something like: Holds all official <code>ISO 4217</code> currency codes as constants (e.g, Currency::USD).
</p>

<p>
The revised comment provides us with the details we need to actually make use of the class. It reveals the currency code standards and how we might access them. Most importantly, we can use the class without having to look at the encapsulated code.
</p><div class='org-src-container'><pre class='src src-php'>&lt;?php
/**
 * Class Currency.
 */
class Currency
{
    const AFN = '971';
    const EUR = '978';
    // ...
}
?&gt;
</pre></div></div></div><div id='outline-container-org866b975' class='outline-3'><h3 id='org866b975'>They leave us with questions</h3><div class='outline-text-3' id='text-org866b975'><p>
Comments can leave us with a lot questions. Forcing us to spend time exploring code bases or online forums looking for examples. The designer of the related code, never took the time to clarify things or believed these details to be obvious.
</p><p>
As an example, we have a PHP function named fit<sub>image</sub> and it takes in 4 arguments, none of witch has been commented on. The 4 arguments are $image (int), $x (double), $y (double) and $optlist (string). The associated interface comment reads as follows: <b>Place an image or template on the page, subject to various options.</b>
</p>

<div class='org-src-container'><pre class='src src-php'>&lt;?php
/**
 * Place an image
 on the page, subject to various options.
 *
 * @param int $image
 * @param double $x
 * @param double $y
 * @param string $optlist
 */
function fit_image($image, $x, $y, $optlist) {}
?&gt;
</pre></div><p>
This comment leaves us with a lot of questions, such as:
</p><ul class='org-ul'><li>Why is the image argument an integer, do I need to preload the image?</li><li>Where is the origin of <code>x</code> and <code>y</code>, top left, bottom left…?</li>
<li>If <code>x</code> and <code>y</code> are doubles, then what unit type should I use to position my image, pixels?</li>
<li>Where can I find the available string options for optlist, and how would I use multiple options, do I separate them with a special character?</li><li>These are just some of the questions that came to mind. Comments should make critical details like these clear by answering the what, and why of things.</li></ul></div></div></div><div id='outline-container-orga561235' class='outline-2'><h2 id='orga561235'>Conclusion</h2><div class='outline-text-2' id='text-orga561235'><p>
Interface comments provides clients with the information they need to make use of an interface. Implementation comments should try to explain what the code is doing, not how it’s doing it. But generally, all comments should attempt to make the things that are not obvious, clear.
</p><p>
We as developers must recognize and appreciate the power of code comments and should take better care of writing them, for the benefits of ourselves and others. If you would like to learn more about writing good comments, you can take a look at the aforementioned book: <a href='https://www.amazon.com/dp/B09B8LFKQL/'>A Philosophy of Software Design</a></p></div></div></div> ]]></content:encoded></item><item><title>Vertical Navigation in Vim</title><link>https://www.vernon-grant.com/Vim/vertical-navigation-in-vim.html</link><pubDate>2023-09-09 Sat 09:35:00 +02:00</pubDate><description>Knowing how to effectively navigate code in a vertical direction can aid your pursuit of becoming more productive. Like most things, Vim provides us with an abundance of different ways to transverse our files vertically, and today we will be sharing some of our favorite ways to vertically navigate code inside of Vim.</description><content:encoded><![CDATA[ <div id='content' class='content'><h1 class='title'>Vertical Navigation in Vim
<br />
<span class='subtitle'>Effectively navigate code in a vertical direction can aid your pursuit of becoming more productive</span></h1><div id='table-of-contents' role='doc-toc'><h2>Table of Contents</h2><div id='text-table-of-contents' role='doc-toc'><ul><li><a href='#orgbe1ed76'>Scrolling the window</a></li><li><a href='#org260a112'>Relative line numbers</a></li><li><a href='#orgdb9e7c2'>Making use of marks</a></li><li><a href='#org27716a2'>Location lists</a></li><li><a href='#org94cff60'>Common vertical motions</a></li></ul></div></div><p>
Knowing how to effectively navigate code in a vertical direction can aid your pursuit of becoming more productive. Like most things, Vim provides us with an abundance of different ways to transverse our files vertically, and today we will be sharing some of our favorite ways to vertically navigate code inside of Vim.
</p><div id='outline-container-orgbe1ed76' class='outline-2'><h2 id='orgbe1ed76'>Scrolling the window</h2><div class='outline-text-2' id='text-orgbe1ed76'><p>
A common habit is to just hold down the j or k keys in order to scroll the active window, up or down. But there's a much faster and better way to move through a file, and that's by making use of the default key bindings <code>ctrl-u</code> and <code>ctrl-d</code>. As you might have guessed, the u stand for up, and the d stands for down.
</p>

<p>
One interesting advantage of using these bindings, instead of holding down <code>j</code> or <code>k</code> is that we get to move multiple lines at a time, and we can actually define how many lines we would like to move each time <code>ctrl-u</code> or <code>ctrl-d</code> is pressed, by setting the scroll option. By default, it will jump down half a screen.
</p>

<div class='org-src-container'><pre class='src src-vim'>set scroll=10 " Default, half a screen.
</pre></div></div></div><div id='outline-container-org260a112' class='outline-2'><h2 id='org260a112'>Relative line numbers</h2><div class='outline-text-2' id='text-org260a112'><p>
Using relative line number can be a great way to accomplish vertical motions efficiently. You can set the relativenumber option inside your .vimrc to convert traditional line numbers to relative ones. Line numbers are relative to the current cursor line.
</p><div class='org-src-container'><pre class='src src-vim'>set relativenumber
</pre></div><p>
With relative line numbers enabled, you can prefix all vertical motions, such as j or k with a count. This gives you the power to jump a certain amount of lines without having to manually calculate it yourself.
</p><p>
For example, let's say I want to move the cursor 10 lines up. I know the point of interest is 10 lines above, because of the relative line numbers. I can then simply just type <code>10k</code> and the cursor will jump up 10 lines. This provides us with a lot of flexibility when motioning through the file.
</p>
</div>
</div>

<div id='outline-container-orgdb9e7c2' class='outline-2'><h2 id='orgdb9e7c2'>Making use of marks</h2><div class='outline-text-2' id='text-orgdb9e7c2'><p>
Marks can be used to tie a cursor position, to a certain key on your keyboard, usually alphabetical letters are used. Not only does it store the location of the cursor, it can also remember the file when using uppercase letters for marks, making it extremely useful when working on multiple files.
</p><p>
Marks can make it easy to vertically navigate a file, as we can bookmark multiple working locations and quickly jump between them. We can set a new mark in normal mode by typing m followed by any alphabetical letter <code>{a-zA-Z}</code>. We can jump to a specific mark in two different ways:
</p>

<p>
The first method is with a backtick <code>`</code> followed by the mark's corresponding letter. This will place the cursor at the exact line and column that was originally marked.
</p>

<p>
The second method is with a single quote <code>'</code> followed by the mark's corresponding letter. This will place the cursor at the first non-blank character of the line that was marked.
</p>

<p>
Here's a quick example, let say we need to take a look at multiple function implementations at the bottom of our file, while working on some other function near the top. In this situation we have to jump vertically between 3 different locations. We can set the following marks:
</p><ul class='org-ul'><li><code>mq</code> For the top position.</li>
<li><code>ma</code> For the first function implementation at the bottom of the file.</li>
<li><code>mz</code> For the second function implementation at the bottom of the file.</li>
</ul>

<p>
With our marks already set, we can jump between our 3 different locations using <code>'q</code>, <code>'a</code>, <code>'z</code>. There's additional ways we can jump between our defined marks, such as with <code>['</code> , which will jump to the mark before the cursor and <code>]'</code> which will jump the next mark below the cursor.
</p>

<p>
For more information about using marks, please see the vim's help section by typing.
</p><p><code>:help mark-motions</code>
</p>
</div>
</div>

<div id='outline-container-org27716a2' class='outline-2'><h2 id='org27716a2'>Location lists</h2><div class='outline-text-2' id='text-org27716a2'><p>
A location list can be constructed that contains lines that matches a certain pattern. We can use any of the default location list grep commands to search the current file for a specific pattern, resulting in a neatly formatted list that we can use to vertically jump around the current file.
</p><div class='org-src-container'><pre class='src src-shell'>" Example of a location list for the pattern 'function'.
/blocks.php|23 col 1-9|  function register_block_type( $name, $args = array() ) {
/blocks.php|36 col 1-9|  function unregister_block_type( $name ) {
/blocks.php|48 col 1-9|  function remove_block_asset_path_prefix( $asset_handle_or_path ) {
/blocks.php|69 col 1-9|  function generate_block_asset_handle( $block_name, $field_name ) {
/blocks.php|101 col 1-9| function register_block_script_handle( $metadata, $field_name ) {
/blocks.php|156 col 1-9| function register_block_style_handle( $metadata, $field_name ) {
</pre></div><p>
For example: if we were inside a file that contained many different functions. It would be a great convenience if we could have a birds-eye view of all the functions inside of the file and jump between them. This can be done using the following grep command.
</p><ul class='org-ul'><li><code>" lw</code> = Opens the location list.</li>
<li><code>" %</code>  = The current file.</li>
</ul>

<p><code>:lvimgrep /pattern/ % | lw</code>
</p>

<p>
After running the command, the location list will be populated with all the lines containing the pattern. If it was Python file for example, we would search for the word def to get the locations for each function in the file.
</p><p>
This gives us a handy tool that we can use to navigate the current file and gives us a great deal of contrast about the file we are working on.
</p></div></div><div id='outline-container-org94cff60' class='outline-2'><h2 id='org94cff60'>Common vertical motions</h2><div class='outline-text-2' id='text-org94cff60'><p>
Before ending, here's some more general ways to motion or scroll vertically using some of the well-known Vim bindings.
</p><ul class='org-ul'><li><code>H</code>, <code>M</code>, <code>L</code> can be used to move the cursor to the top, middle or bottom of the current window. H stands for home, M stands for middle and L stands for last.</li>
<li><code>zt</code>, <code>zz</code>, <code>zb</code> can be used to scroll the current line to the top, middle or bottom of the window, leaving the cursor in the same column.</li>
<li><code>gg</code>, <code>G</code> can be used to move the cursor to the start and end of a file. These commands are considered jumps, so you can return to your previous position using ctrl-o.</li>
</ul>
</div>
</div>
</div> ]]></content:encoded></item></channel></rss>